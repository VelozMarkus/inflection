plugins {
    id "java"
    id "maven-publish"
    id "eclipse"
    id "idea"
    id "com.jfrog.bintray" version "1.2"
	id "me.champeau.gradle.antlr4" version "0.1"
}

group = "ch.liquidmind"
version = "0.0.4"

jar {
    from ("./LICENSE") {
        into "META-INF"
    }
}

repositories {
    mavenCentral()
	maven {
		url "http://dl.bintray.com/deflector/maven"
	}
}

dependencies {
	compile "__commons-io:commons-io:2.4"
	compile "__org.antlr:antlr4:4.5"
	compile "com.google.guava:guava:19.0-rc2"
	compile "junit:junit:4.12"
	compile 'org.reflections:reflections:0.9.10'
	compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
}

// Antlr Config
antlr4 {
	source=file("src/main/resources/ch/liquidmind/inflection/grammar")
	output=file("$buildDir/generated-src/ch/liquidmind/inflection/grammar")
}
compileJava.dependsOn antlr4
sourceSets.main.java.srcDirs += "$buildDir/generated-src"

// Sources JAR
task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

// Javadocs JAR
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name',
                                    'ch.liquidmind:inflection')
                root.appendNode('description',
                                    'Turns checked exceptions into runtime exceptions by generating wrapper classes for arbitrary APIs in Java.')
                root.appendNode('url',
                                    'http://www.liquidmind.ch/')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                def scm = root.appendNode('scm')
                scm.appendNode('connection', 'scm:git:git@github.com:liquid-mind/inflection.git')
                scm.appendNode('developerConnection', 'scm:git:git@github.com:liquid-mind/inflection.git')
                scm.appendNode('url', 'git@github.com:liquid-mind/inflection.git')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'John Brush')
                developer.appendNode('email', 'brsh@zhaw.ch')
                developer.appendNode('organization', 'Liquidmind')
                developer.appendNode('organizationUrl', 'http://www.liquidmind.ch')
            }
        }
    }
}

bintray {
        publications = ['mavenJava']
        dryRun = false
        publish = false
        user=BINTRAY_USER
        key=BINTRAY_API_KEY
        pkg {
            repo = 'maven'
            name = 'inflection'
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/liquid-mind/inflection.git'
            version {
                gpg {
                    sign = true
                    passphrase=BINTRAY_GPG_PASS
                }
            }
        }
}
